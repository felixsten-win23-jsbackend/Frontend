@page "/courses/details/{Id}"
@attribute [StreamRendering]
@attribute [Authorize]

@inject HttpClient Http

<PageTitle>Course</PageTitle>

<section class="course">
    <div class="container">
        @if (course == null)
        {
            <p>Loading...</p>
        }
        else
        {
            <div class="course-details">
                @if (course.IsBestseller)
                {
                    <div class="best-seller">Best Seller</div>
                }
                <img src="@course.ImageUri" alt="@course.Title" />
                <div class="content">
                    <h2 class="course-title">@course.Title</h2>
                    <div class="course-description">@course.Ingress</div>
                    <div class="course-footer">
                        <div class="course-hours">@course.Hours hours</div>
                        <div class="course-likes">
                            <i class="fa-regular fa-thumbs-up"></i> @course.LikesInProcent (@course.LikesInNumbers)
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</section>

@code {

    [Parameter] public string Id { get; set; }

    private CourseModel? course;

    protected override async Task OnInitializedAsync()
    {
        var query = new GraphQLRequest
            {
                Query = @"
            query ($id: String!) {
                getCourseById(id: $id) {
                    id
                    title
                    imageUri
                    isBestseller
                    ingress
                    hours
                    likesInProcent
                    likes
                }
            }",
                Variables = new { id = Id }
            };

        var response = await Http.PostAsJsonAsync("https://courseprovider-jsbackend.azurewebsites.net/api/graphql?", query);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<GraphQLResponse<CourseModelWrapper>>();
            course = result?.Data?.GetCourseById;
        }
        else
        {
            
            Console.WriteLine($"Error fetching course: {response.StatusCode}");
        }
    }

    private class CourseModelWrapper
    {
        public CourseModel GetCourseById { get; set; } = new CourseModel();
    }

    private class CourseModel
    {
        public string Id { get; set; } = string.Empty;
        public string Title { get; set; } = string.Empty;
        public string? ImageUri { get; set; }
        public bool IsBestseller { get; set; }
        public string Ingress { get; set; } = string.Empty;
        public string Hours { get; set; } = string.Empty;
        public string LikesInProcent { get; set; } = string.Empty;
        public string LikesInNumbers { get; set; } = string.Empty;
    }

    private class GraphQLRequest
    {
        public string Query { get; set; } = string.Empty;
        public object Variables { get; set; } = new { };
    }

    private class GraphQLResponse<T>
    {
        public T Data { get; set; } = default!;
    }
}