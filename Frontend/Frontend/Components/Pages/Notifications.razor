@page "/notifications"

@attribute [StreamRendering]
@using System.ComponentModel.DataAnnotations
@using Frontend.Components.Layout
@using Microsoft.AspNetCore.Identity
@using Frontend.Data
@using Microsoft.EntityFrameworkCore
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject ApplicationDbContext DbContext



<PageTitle>Profile</PageTitle>

<h3>Profile</h3>


<div id="detailspage">
    <div class="container">
        @if (user == null)
        {
            <p>Loading...</p>
        }
        else
        {
            <aside id="aside-profile">
                <div class="profile-info">
                    <img src="@user.ProfileImage" alt="@($"{user.FirstName} {user.LastName}")" />
                    <h5>@($"{user.FirstName} {user.LastName}")</h5>
                    <p>@user.Email</p>
                </div>
                <ManageNavMenu />
            </aside>
        }

        <section id="newsletter">
            <div class="container">
                <EditForm Model="Input" OnValidSubmit="OnValidSubmitNewsletterAsync">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label for="email">Enter email to subscribe to newsletter</label>
                        <InputText @bind-Value="Input.Email" id="email" class="form-control" />
                        <ValidationMessage For="() => Input.Email" />
                    </div>

                    <button class="btn-theme-s" type="submit">Subscribe to news</button>
                </EditForm>

                @if (subscriptionStatus != null)
                {
                    <div class="alert @subscriptionStatus.CssClass">@subscriptionStatus.Message</div>
                }
            </div>
        </section>

    </div>
</div>





@code {
    private ApplicationUser user = default!;
    private string? username;
    private string? phoneNumber;
    private SubscriptionStatus? subscriptionStatus;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private SubscriberInput Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserManager.GetUserAsync(HttpContext.User) ?? null!;
        username = await UserManager.GetUserNameAsync(user);
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);
    }

    private async Task OnValidSubmitNewsletterAsync()
    {
        try
        {
            var existingSubscriber = await DbContext.Subscribers.FirstOrDefaultAsync(s => s.Email == Input.Email);
            if (existingSubscriber != null)
            {
                subscriptionStatus = new SubscriptionStatus
                    {
                        Message = "You are already subscribed!",
                        CssClass = "alert-info"
                    };
            }
            else
            {
                var subscriber = new SubscriberEntity { Email = Input.Email! };
                await DbContext.Subscribers.AddAsync(subscriber);
                await DbContext.SaveChangesAsync();

                subscriptionStatus = new SubscriptionStatus
                    {
                        Message = "Successfully subscribed!",
                        CssClass = "alert-success"
                    };
            }
        }
        catch (Exception ex)
        {
            subscriptionStatus = new SubscriptionStatus
                {
                    Message = $"An error occurred: {ex.Message}",
                    CssClass = "alert-danger"
                };
        }
    }

    private sealed class SubscriberInput
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string? Email { get; set; }
    }

    private class SubscriptionStatus
    {
        public string Message { get; set; } = string.Empty;
        public string CssClass { get; set; } = string.Empty;
    }
}
