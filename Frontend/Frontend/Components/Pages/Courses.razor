@page "/courses"
@using System.Text.Json
@using Frontend.Data.Models
@attribute [StreamRendering]
@attribute [Authorize]

<PageTitle>Courses</PageTitle>

<section class="courses">
    <div class="container">
        <h1>Courses</h1>
        <div class="course-list">

            @if (courses == null)
            {
                <p>No courses found</p>
            }
            else
            {
                @foreach (var course in courses)
                {
                    var link = $"courses/details/{course.Id}";
                    <a class="course" href="@link">
                        @if (course.IsBestseller)
                        {
                            <div class="best-seller">Best Seller</div>
                        }
                        <img src="@course.ImageUri" alt="@course.Title" />
                        <div class="content">
                            <h2 class="course-title">@course.Title</h2>
                            <div class="course-footer">
                                <div class="course-hours">@course.Hours hours</div>
                                <div class="course-likes">
                                    <i class="fa-regular fa-thumbs-up"></i> @course.LikesInProcent (@course.LikesInNumbers)
                                </div>
                            </div>
                        </div>
                    </a>
                }
            }

        </div>
    </div>
</section>

@code {
    private List<CourseCardModel>? courses;

    protected override async Task OnInitializedAsync()
    {
        var query = new GraphQLQuery
            {
                Query = @"{
                getCourses {
                    id
                    isBestseller
                    imageUri
                    isDigital
                    categories
                    title
                    ingress
                    starRating
                    reviews
                    likesInProcent
                    likes
                    hours
                }
            }"
            };

        try
        {
            var response = await Http.PostAsJsonAsync("https://courseprovider-jsbackend.azurewebsites.net/api/graphql?", query);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<DynamicGraphQLResponse>();

                if (result != null && result.Data.TryGetProperty("getCourses", out var coursesArray))
                {
                    courses = coursesArray.EnumerateArray()
                        .Select(course => new CourseCardModel
                            {
                                Id = course.GetProperty("id").GetString(),
                                IsBestseller = course.GetProperty("isBestseller").GetBoolean(),
                                ImageUri = course.GetProperty("imageUri").GetString(),
                                Title = course.GetProperty("title").GetString(),
                                Hours = course.GetProperty("hours").GetString(),
                                LikesInProcent = course.GetProperty("likesInProcent").GetString(),
                                LikesInNumbers = course.GetProperty("likes").GetString()
                            })
                        .ToList();
                }
            }
            else
            {
                
                var responseContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error fetching courses: {response.StatusCode}, {responseContent}");
            }
        }
        catch (Exception ex)
        {
            
            Console.WriteLine($"Exception while fetching courses: {ex.Message}");
        }
    }
}